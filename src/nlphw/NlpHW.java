package Class1;

import java.io.*;
import java.util.*;
import java.util.stream.Collectors;



import edu.stanford.nlp.coref.CorefCoreAnnotations;

import edu.stanford.nlp.coref.data.CorefChain;
import edu.stanford.nlp.ie.machinereading.structure.MachineReadingAnnotations;
import edu.stanford.nlp.io.*;
import edu.stanford.nlp.ling.*;
import edu.stanford.nlp.pipeline.*;
import edu.stanford.nlp.semgraph.SemanticGraph;
import edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations;
import edu.stanford.nlp.semgraph.SemanticGraphEdge;
import edu.stanford.nlp.sentiment.SentimentCoreAnnotations;
import edu.stanford.nlp.trees.*;
import edu.stanford.nlp.util.*;
import edu.stanford.nlp.util.TypesafeMap.Key;
import javax.swing.GroupLayout.Alignment;
import javax.swing.GroupLayout;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.text.BadLocationException;
 
public class JFrame extends javax.swing.JFrame {
    /**
     * Creates new form JFrame
     */
    public JFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jEditorPane1 = new javax.swing.JEditorPane();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jEditorPane2 = new javax.swing.JEditorPane();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Enter your sentence");

        jTextField1.setForeground(new java.awt.Color(0, 51, 51));
        jTextField1.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        jTextField1.setText("Rami Shahazeh sent the message to Raghad Ebrahem");
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jButton1.setText("Show Result");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel2.setText("The main Actor");

        jScrollPane1.setViewportView(jEditorPane1);

        jLabel3.setText("Press and wait few secound");

        jScrollPane2.setViewportView(jEditorPane2);

        jLabel4.setText("More details");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        layout.setHorizontalGroup(
        	layout.createParallelGroup(Alignment.LEADING)
        		.addGroup(layout.createSequentialGroup()
        			.addContainerGap()
        			.addGroup(layout.createParallelGroup(Alignment.LEADING)
        				.addGroup(layout.createSequentialGroup()
        					.addGap(9)
        					.addGroup(layout.createParallelGroup(Alignment.LEADING)
        						.addGroup(layout.createSequentialGroup()
        							.addComponent(jLabel4, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        							.addGap(33))
        						.addGroup(layout.createSequentialGroup()
        							.addComponent(jLabel2)
        							.addPreferredGap(ComponentPlacement.RELATED)))
        					.addGroup(layout.createParallelGroup(Alignment.LEADING)
        						.addComponent(jScrollPane1, GroupLayout.PREFERRED_SIZE, 615, GroupLayout.PREFERRED_SIZE)
        						.addComponent(jScrollPane2, GroupLayout.PREFERRED_SIZE, 623, GroupLayout.PREFERRED_SIZE)))
        				.addGroup(layout.createParallelGroup(Alignment.TRAILING, false)
        					.addGroup(layout.createSequentialGroup()
        						.addComponent(jLabel1)
        						.addGap(10)
        						.addComponent(jTextField1))
        					.addGroup(Alignment.LEADING, layout.createSequentialGroup()
        						.addGap(291)
        						.addComponent(jButton1)
        						.addGap(18)
        						.addComponent(jLabel3, GroupLayout.PREFERRED_SIZE, 162, GroupLayout.PREFERRED_SIZE))))
        			.addContainerGap(31, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
        	layout.createParallelGroup(Alignment.LEADING)
        		.addGroup(layout.createSequentialGroup()
        			.addContainerGap()
        			.addGroup(layout.createParallelGroup(Alignment.BASELINE)
        				.addComponent(jTextField1, GroupLayout.PREFERRED_SIZE, 45, GroupLayout.PREFERRED_SIZE)
        				.addComponent(jLabel1, GroupLayout.PREFERRED_SIZE, 29, GroupLayout.PREFERRED_SIZE))
        			.addGroup(layout.createParallelGroup(Alignment.LEADING)
        				.addGroup(layout.createSequentialGroup()
        					.addPreferredGap(ComponentPlacement.RELATED)
        					.addGroup(layout.createParallelGroup(Alignment.BASELINE)
        						.addComponent(jButton1, GroupLayout.PREFERRED_SIZE, 38, GroupLayout.PREFERRED_SIZE)
        						.addComponent(jLabel3, GroupLayout.PREFERRED_SIZE, 25, GroupLayout.PREFERRED_SIZE))
        					.addGap(26)
        					.addComponent(jScrollPane1, GroupLayout.PREFERRED_SIZE, 41, GroupLayout.PREFERRED_SIZE))
        				.addGroup(layout.createSequentialGroup()
        					.addGap(79)
        					.addComponent(jLabel2)))
        			.addGap(34)
        			.addGroup(layout.createParallelGroup(Alignment.TRAILING)
        				.addComponent(jScrollPane2, GroupLayout.PREFERRED_SIZE, 100, GroupLayout.PREFERRED_SIZE)
        				.addGroup(layout.createSequentialGroup()
        					.addComponent(jLabel4)
        					.addGap(53)))
        			.addContainerGap(65, Short.MAX_VALUE))
        );
        getContentPane().setLayout(layout);

        pack();
    }// </editor-fold>                        

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {                                            
        // TODO add your handling code here:
    }                                           
  
    public HashMap<String,Double> makeEqualValue(HashMap<String,Double> Names1,String firstName, String SecondName)
    {
    	for(Map.Entry m:Names1.entrySet()){    
 	        if(m.getKey().toString().contains(SecondName))
 	        {
 	        	Double SecondValue = Names1.get((String)m.getKey());
 	        	//System.out.println(SecondValue);
 	        	for(Map.Entry s1:Names1.entrySet()){
 	        		if(s1.getKey().toString().contains(firstName)) {
 	        			Names1.put((String) s1.getKey(), SecondValue);
 	        			//System.out.println(Names1.get((String)s1.getKey()));
 	        			break;
 	        			
 	        		
 	        		}
 	        		
 	        	}
 	        }
    	}
     	return Names1;
    }
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        jEditorPane2.setContentType("text/html");
        jEditorPane2.setEditable(false);
        jEditorPane1.setContentType("text/html");
        jEditorPane1.setEditable(false);
        String input = jTextField1.getText();
        String result="";
            
             Properties props = new Properties();
	    props.setProperty("annotators", "tokenize, ssplit, pos, lemma, ner, parse, dcoref");

	    
	    StanfordCoreNLP pipeline = new StanfordCoreNLP(props);



	    // An Annotation is a Map with Class keys for the linguistic analysis types.
	    // You can get and use the various analyses individually.
	    // For instance, this gets the parse tree of the first sentence in the text.
	   
	    List<CoreMap> Names = new ArrayList<CoreMap>();
	    HashMap<String,Double> AllEntitys=new HashMap<String,Double>();    
	    CoreDocument doc = new CoreDocument(input);

	    pipeline.annotate(doc);

	  
    
    //knowing the entitys in the sentence
    for (CoreEntityMention em : doc.entityMentions())
      {
    	//System.out.println("\tdetected entity: \t"+em.text()+"\t"+em.entityType());
    	String n = em.text();
    	String t = em.entityType();
		//System.out.println(t);
		//System.out.println(n);
		 
    	if(t.equals("PERSON")  || t.equals("ORGANIZATION"))
    		AllEntitys.put(n,(double) 0.5); 	
    }
    //now AllEntitys have the possible actors in the sentence 
    
    
    // Initialize an Annotation with some text to be annotated. The text is the argument to the constructor.
    Annotation annotation;
    annotation = new Annotation(input);

    // run all the selected Annotators on this text
    pipeline.annotate(annotation);
    List<CoreMap> sentences = annotation.get(CoreAnnotations.SentencesAnnotation.class);
   
    
    if (sentences != null && ! sentences.isEmpty()) {
    	CoreMap sentence = sentences.get(0);
    	if(AllEntitys.size()>1)
    {
      @SuppressWarnings("deprecation")
      SemanticGraph graph = sentence.get(SemanticGraphCoreAnnotations.CollapsedCCProcessedDependenciesAnnotation.class);
      String s = graph.toString(SemanticGraph.OutputFormat.LIST);
      String[] eachLine = s.split("\n");
      boolean makeNamesValuesEquals=false;
      String FirstNameEqual ="";
      String SecondNameEqual = "";
      for(int i=0;i<eachLine.length;i++)
      {
     	 System.out.println( eachLine[i]);
     	 String[] line = eachLine[i].split("\\(");
     	 String Relation = line[0];
     	 String firstField = line[1].split(",")[0].split("-")[0];
     	 String secondField = line[1].split(",")[1].split("\\)")[0].split("-")[0].replaceAll(" ", "");
     	 //now we have the graph seperat
     	 //System.out.println( Relation );
     	// System.out.println( firstField );
     	 //System.out.println( secondField );
     	 if(Relation.equals("nmod:agent"))
     	 {
     		for(Map.Entry m:AllEntitys.entrySet()){    
     	        if(m.getKey().toString().contains(secondField))
     	        {
     	        	AllEntitys.put((String) m.getKey(), AllEntitys.get((String)m.getKey()) + 0.1);
     	        }
     	       } 
     	 }
     	 if(Relation.equals("nmod:to"))
     	 {
     		for(Map.Entry m:AllEntitys.entrySet()){    
     	        if(m.getKey().toString().contains(secondField))
     	        {
     	        	AllEntitys.put((String) m.getKey(), AllEntitys.get((String)m.getKey()) - 0.1);
     	        }
     	       } 
     	 }
     	 if(Relation.equals("nsubj"))
     	 {
     		for(Map.Entry m:AllEntitys.entrySet()){    
     	        if(m.getKey().toString().contains(secondField))
     	        {
     	        	AllEntitys.put((String) m.getKey(), AllEntitys.get((String)m.getKey()) + 0.1);
     	        }
     	       } 
     	 }
     	 if(Relation.equals("dobj"))
     	 {
     		for(Map.Entry m:AllEntitys.entrySet()){    
     	        if(m.getKey().toString().contains(secondField))
     	        {
     	        	AllEntitys.put((String) m.getKey(), AllEntitys.get((String)m.getKey()) - 0.1);
     	        }
     	       } 
     	 }
     	 if(Relation.equals("conj:and"))
     	 {
     		makeNamesValuesEquals = true;
     		FirstNameEqual=firstField;
     		SecondNameEqual	=secondField;
     	 }
     	
      }
      
      if(makeNamesValuesEquals==true)
      {
    	  AllEntitys = makeEqualValue(AllEntitys,FirstNameEqual,SecondNameEqual);
      }
       		
    jEditorPane2.setText("The candidate Actors:"+"<br>"); 
    //System.out.println("Names found:");
    Double MainActorResult = 0.0;
    String MainActor = "";
    String details="";
    for(Map.Entry m:AllEntitys.entrySet()){
        details=m.getKey().toString()+"  "+ m.getValue().toString();
    	if(MainActorResult<(Double) m.getValue())
    	{
    		MainActor = m.getKey().toString();
    		MainActorResult = (Double) m.getValue();
    	}
    	try {
    	      javax.swing.text.Document docs = jEditorPane2.getDocument();
    	      docs.insertString(docs.getLength(), details+"\n", null);
    	   } catch(BadLocationException exc) {
    	      exc.printStackTrace();
    	   }
    }
   // System.out.println(details);
      
        
         result= MainActor;
    }
    
    
    else {
    	//one actor in the sentence
    	if(AllEntitys.size()==1)
    	{
    		 for(Map.Entry m:AllEntitys.entrySet()){    
    		       result=m.getKey().toString();    
    		       } 
    	}
    	else
    	{ 
    		result="No Actors";
    		jEditorPane2.setText("No Actors");
    	}
    }
      
  
        jEditorPane1.setText(result);
       

        // TODO add your handling code here:
    }  
    }

    private StringBuilder sb = new StringBuilder();
    public String appendText(String text) {
     return sb.append(text).toString();
}

  
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JButton jButton1;
    private javax.swing.JEditorPane jEditorPane1;
    private javax.swing.JEditorPane jEditorPane2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration                   
}
